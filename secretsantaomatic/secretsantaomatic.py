#!/usr/bin/env python3
"""Secret-Santa-O-Matic (for Python)

This script allows the user to generate and print to the console a sequence
of names that represents a gift giving order for secret santa. Includes the
possibility to set invalid (i.e. forbidden) combinations.

Author: Matthias Budde 2022

This file can also be imported as a module and contains the following
functions:

    * draw_lots - randomly draws a secret santa sequence
    * main - the main function of the script
"""

#This script requires that `logging` be installed within the Python
#environment you are running this script in.

# Will terminate after 20 tries if no valid sequence can be found.

__version__ = '0.01'

import random

options = { 'outpath': './santas' }

def draw_lots(candidate_set: set, forbidden_recipients: dict = {}) -> list:
    """Creates a random secret santa sequence from a candidate list.

    Parameters
    ----------
    candidate_set : set, mandatory
        set with names from whom a secret santa sequence should be drawn.
    forbidden_recipients : dict, optional
        dictionary that holds for each candidate a list of candidates that
        should not receive gifts from the candidate by that name
        (default is None).

    Returns
    ------
    Secret santa sequence as list of names. Last element is first name again.
    Returns empty set if no valid sequence can be found.
    """
    candidate_set_copy = candidate_set.copy()
    result_sequence = []
    previous_candidate = None
    fail_count = 0
    while candidate_set_copy:
        candidate_name = random.choice(tuple(candidate_set_copy))
        if not candidate_name in forbidden_recipients.get(previous_candidate, []):
            result_sequence.append(candidate_name)
            candidate_set_copy.remove(candidate_name)
            previous_candidate = candidate_name
            fail_count = 0
        else:
            print('Candidate invalid!')
            fail_count += 1
        if fail_count >= 5:
            result_sequence = []
            break
    # check if last and first in sequence are a valid combination
    if result_sequence:
        first_recipient = result_sequence[0]
        if not first_recipient in forbidden_recipients.get(previous_candidate, []):
            result_sequence.append(first_recipient)
        else:
            result_sequence = []
    return result_sequence

def write_sequence(sequence: list):
    """writes the passed sequence into files."""
    write_path = options.get('outpath', '.')
    for gifter, recipient in zip(sequence, sequence[1:]):
        print(gifter, recipient)
        with open(f'{write_path}/{gifter}.txt', 'w', encoding = 'utf-8') as outfile:
            outfile.write('')
            outfile.write(f'Hello {gifter}!\n\n')
            outfile.write('This text file has been automatically generated by' \
                          f' Secret-Santa-O-Matic for Python {__version__}\n\n')
            outfile.write('You are secret santa for ... (drumroll) ...\n\n')
            outfile.write(f'     {recipient}\n\n')
            outfile.write('Enjoy! And please don\'t tell anyone!\n')

# # TODO: write function to dynamically load people
# def register_recipient(name: str, forbidden_recipients: list = None):
#     """Add a recipient, optionally with a list of people whom they should not give gifts to."""
#     pass

def main():
    """Main function to demo."""
    sequence = []
    while not sequence:
        sequence = draw_lots({'Alice', 'Bob', 'Charlene', 'David'},
                {'Alice': ['Bob'], 'Bob': ['Alice']})
    write_sequence(sequence)

if __name__ == '__main__':
    main()
